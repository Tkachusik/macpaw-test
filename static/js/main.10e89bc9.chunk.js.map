{"version":3,"sources":["components/control.component.js","actions.js","components/jokeList.component.js","components/favouriteJoke.component.js","components/favourite.component.js","components/mobile/favouriteBtn.component.js","components/mobile/favourite.component.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["mapDispatchToProps","controlRadioButtonClick","text","type","categoriesClick","searchTextChange","getJoke","searchType","category","searchText","dispatch","a","axios","get","result","data","connect","state","className","onChange","name","value","checked","htmlFor","onClick","event","target","placeholder","heartClick","joke","jokes","favourites","map","id","updated","Date","updated_at","now","key","src","has","href","url","parseInt","Math","abs","FavouriteJoke","dislikeClick","Array","from","openFavouriteClick","showModal","closeFavouriteClick","App","Boolean","window","location","hostname","match","initialState","localStorage","getItem","Map","JSON","parse","reducer","action","favouritesMap","set","setItem","stringify","entries","dislikeFavouritesMap","delete","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10e89bc9.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { controlRadioButtonClick, categoriesClick, searchTextChange, getJoke } from '../actions';\n\nconst Control = ({ controlRadioButtonClick, searchType, categoriesClick, category, searchTextChange, searchText, getJoke }) => {\n    return (\n        <div className=\"content\">\n            <p className=\"hello\">Hey!</p>\n            <p className=\"find\">Let's try to find a joke for you</p>\n            <div className=\"form-check form-check-position\">\n                <input onChange={() => controlRadioButtonClick('random')} className=\"form-check-input\" type=\"radio\" name=\"joke-search\" value=\"random\" checked={searchType === \"random\"} />\n                <label className=\"form-check-label\" htmlFor=\"exampleRadios1\">\n                    Random\n        </label>\n            </div>\n            <div className=\"form-check\">\n                <input onChange={() => controlRadioButtonClick('category')} className=\"form-check-input\" type=\"radio\" name=\"joke-search\" value=\"categories\" checked={searchType === \"category\"} />\n                <label className=\"form-check-label\" htmlFor=\"exampleRadios1\">\n                    From categories\n        </label>\n            </div>\n            {\n                (searchType === \"category\") ?\n                    <div>\n                        <button onClick={() => categoriesClick('animal')} type=\"button\" className={category=== 'animal' ? 'btn btn-light forma active' : 'btn btn-light forma'}>ANIMAL</button>\n                        <button onClick={() => categoriesClick('career')} type=\"button\" className={category === 'career' ? 'btn btn-light forma active' : 'btn btn-light forma'}>CAREER</button>\n                        <button onClick={() => categoriesClick('celebrity')} type=\"button\" className={category === 'celebrity' ? 'btn btn-light forma active' : 'btn btn-light forma'}>CELEBRITY</button>\n                        <button onClick={() => categoriesClick('dev')} type=\"button\" className={category === 'dev' ? 'btn btn-light forma active' : 'btn btn-light forma'}>DEV</button>\n                    </div>\n                    :\n                    \"\"\n            }\n            <div className=\"form-check\">\n                <input onChange={() => controlRadioButtonClick('search')} className=\"form-check-input\" type=\"radio\" name=\"joke-search\" value=\"search\" checked={searchType === \"search\"} />\n                <label>\n                    Search\n        </label>\n            </div>\n            {\n                (searchType === \"search\") ?\n                    <div>\n                        <input onChange={(event) => searchTextChange(event.target.value)} className=\"radius search-text position-text\" type=\"text\" value={searchText} placeholder=\"Free text search..\" />\n                    </div>\n                    :\n                    \"\"\n            }\n            <div>\n                <button onClick={() => getJoke(searchType, category, searchText)} type=\"button\" className=\"btn btn-primary\">Get a joke</button>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        searchType: state.searchType,\n        category: state.category,\n        searchText: state.searchText,\n    }\n}\n\nconst mapDispatchToProps = {\n    controlRadioButtonClick,\n    categoriesClick,\n    searchTextChange,\n    getJoke,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Control);","import axios from 'axios';\n\nexport const controlRadioButtonClick = (text) => ({type:\"CONTROL_RADIO_BUTTON_CLICK\", text});\nexport const categoriesClick = (text) => ({type:\"CATEGORIES_CLICK\", text});\nexport const searchTextChange = (text) => ({type:\"SEARCH_TEXT_CHANGE\", text});\n\nexport const getJoke = (searchType, category, searchText) => async (dispatch) => {\n    let result;\n    let data;\n\n    switch (searchType) {\n        case 'random':\n            result = await axios.get('https://api.chucknorris.io/jokes/random');\n            data = [ result.data ];\n            break;\n        case 'category':\n            result = await axios.get(`https://api.chucknorris.io/jokes/random?category=${category}`);\n            data = [ result.data ];\n            break;\n        case 'search':\n            result = await axios.get(`https://api.chucknorris.io/jokes/search?query=${searchText}`);\n            data = result.data.result;\n            break;\n    }\n    return dispatch({ type:\"GET_JOKE\", data });\n};\n\nexport const heartClick = (joke) => ({ type:\"HEART_CLICK\", joke });\nexport const closeFavouriteClick = () => ({ type:\"CLOSE_FAVOURITE_CLICK\", showModal: false });\nexport const openFavouriteClick = () => ({ type:\"OPEN_FAVOURITE_CLICK\", showModal: true });\nexport const dislikeClick = (id) => ({ type: \"DISLIKE_CLICK\", id });","import React from 'react';\nimport { connect } from 'react-redux';\nimport { heartClick } from '../actions';\n\nconst JokeList = ({ heartClick, jokes, favourites }) => {\n    const checkIfFavourite = (id) => {\n        return favourites.has(id);\n    };\n\n    const renderJokes = () => {\n        return jokes.map(joke => {\n            const updated = new Date(joke.updated_at);\n            const now = new Date();\n            return(\n                <div className=\"joke-item\" key={joke.id}>\n                    <div className=\"heart\">\n                        <img src={checkIfFavourite(joke.id) ? \"/heart2.png\" : \"/heart.png\"} onClick={() => heartClick(joke)} />\n                    </div>\n                    <div className=\"joke-content\">\n                        <div className=\"message\">\n                            <img src=\"/message.png\" />\n                        </div>\n                        <div className=\"joke\">\n                            <a href={joke.url} className=\"link\">\n                                ID: {joke.id}\n                <img src=\"/link.png\" />\n                            </a>\n                            <p className=\"text1\">{joke.value}</p>\n                            <div className=\"last-update\">\n                                <p>Last update: {parseInt(Math.abs(now - updated) / 36e5)} hours ago</p>\n                                <button type=\"button\" className=\"btn btn-light celebtiry-Btn\">CELEBRITY</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n    }\n    return (\n        <div className=\"jokes-list\">{renderJokes()}</div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        jokes: state.jokes,\n        favourites: state.favourites,\n    }\n}\n\nconst mapDispatchToProps = {\n    heartClick,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(JokeList);","import React from 'react';\n\nconst FavouriteJoke = ({ dislikeClick, joke, now, updated, id }) => {\n    return (\n        <div className=\"favourites-joke-item\" key={joke.id}>\n            <div className=\"heart2\">\n                <img src=\"/heart2.png\" onClick={() => dislikeClick(id)} />\n            </div>\n            <div className=\"joke-content\">\n                <div className=\"message2\">\n                    <img src=\"/message.png\" />\n                </div>\n                <div className=\"joke\">\n                    <a href=\"#\" className=\"link\">\n                        ID: {joke.id}\n                        <img src=\"/link.png\" />\n                    </a>\n                    <p className=\"text-string\">{joke.value}</p>\n                    <div className=\"last-update2\">\n                        <p>Last update: {parseInt(Math.abs(now - updated) / 36e5)} hours ago</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\n\n\nexport default FavouriteJoke;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { dislikeClick } from '../actions';\nimport FavouriteJoke from './favouriteJoke.component';\n\nconst Favourite = ({ favourites, dislikeClick }) => {\n    const renderFavouriteJokes = () => {\n        return Array.from(favourites).map(([id, joke]) => {\n            const updated = new Date(joke.updated_at);\n            const now = new Date();\n\n            return (\n                <FavouriteJoke \n                    updated={updated}\n                    now={now}\n                    id={id}\n                    dislikeClick={dislikeClick}\n                    joke={joke}\n                />\n            );\n        });\n    };\n\n    return (\n        <div className=\"col-lg-4 favourites min-vh-100 d-none d-lg-block\">\n            <p className=\"text-favourite\">Favourite</p>\n            <div className=\"favourites-jokes-list\">\n                {renderFavouriteJokes()}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        favourites: state.favourites,\n    }\n}\n\nconst mapDispatchToProps = {\n    dislikeClick,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Favourite);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { openFavouriteClick } from '../../actions';\n\nconst FavouriteBtn = ({ openFavouriteClick }) => (\n    <div className=\"d-md-block d-lg-none favourite-btn\" onClick={() => openFavouriteClick()}>\n        <img src=\"/Group 22.png\" className=\"elipse\" />\n        <p>Favorites</p>\n    </div>\n);\n\nconst mapStateToProps = (state) => {\n    return {}\n}\n\nconst mapDispatchToProps = {\n    openFavouriteClick,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(FavouriteBtn);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { closeFavouriteClick } from '../../actions';\n\nconst Favourite = ({ closeFavouriteClick, showModal, favourites }) => {\n    const renderFavouriteJokes = () => {\n        return Array.from(favourites).map(([id, joke]) => {\n            const updated = new Date(joke.updated_at);\n            const now = new Date();\n\n            return(\n                <div className=\"favourites-joke-item\" key={joke.id}>\n                    <div className=\"heart2\">\n                      <img src=\"/heart2.png\" />\n                    </div>\n                    <div className=\"joke-content\">\n                      <div className=\"message2\">\n                        <img src=\"/message.png\" />\n                      </div>\n                      <div className=\"joke\">\n                        <a href=\"#\" className=\"link\">\n                          ID: {joke.id}\n                        <img src=\"/link.png\" />\n                        </a>\n                        <p className=\"text-string\">{joke.value}</p>\n                        <div className=\"last-update2\">\n                          <p>Last update: {parseInt(Math.abs(now - updated) / 36e5)} hours ago</p>\n                        </div>\n                      </div>\n                    </div>\n                </div>\n            );\n        });\n    };\n\n    if(showModal) {\n        return(\n            <div className=\"md-modal d-lg-none\">\n            <div className=\"row no-margin\">\n              <div className=\"col-md-5\">\n              </div>\n              <div className=\"col-md-7 col-sm-12 min-vh-100 favourites\">\n                <div className=\"heading\">\n                  <div className=\"favourite-btn2\" onClick={() => closeFavouriteClick()}>\n                    <img src=\"/GroupX.png\" className=\"elipse\" />\n                    <p className=\"text-favourite-mobile\">Favourite</p>\n                  </div>\n                </div>\n                <div className=\"favourites-jokes-list-mobile\">\n                  {renderFavouriteJokes()}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n    \n    return \"\";\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        showModal: state.showModal,\n        favourites: state.favourites,\n    }\n}\n\nconst mapDispatchToProps = {\n    closeFavouriteClick,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favourite);","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Control from './components/control.component';\nimport JokeList from './components/jokeList.component';\nimport Favourite from './components/favourite.component';\nimport FavouriteBtn from './components/mobile/favouriteBtn.component';\nimport FavouriteModal from './components/mobile/favourite.component';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <FavouriteModal />\n      <div className=\"container-fluid\">\n        <div className=\"row no-margin\">\n          <div className=\"col-lg-8 col-md-12\">\n            <div className=\"heading\">\n              <p className=\"msi\">MSI 2020</p>\n              <FavouriteBtn />\n            </div>\n            <Control />\n            <JokeList />\n          </div>\n          <Favourite />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const getFromLocalStorage = () => {\n    const favourites = localStorage.getItem('favourites');\n    if (favourites) {\n        return new Map(JSON.parse(localStorage.getItem('favourites')));\n    }\n    return new Map();\n};\n\nconst initialState = {\n    searchType: 'random',\n    category: 'animal',\n    searchText: '',\n    jokes: [],\n    favourites: getFromLocalStorage(),\n    showModal: false,\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"OPEN_FAVOURITE_CLICK\":\n            return {\n                ...state,\n                showModal: action.showModal,\n            }\n        case \"CLOSE_FAVOURITE_CLICK\":\n            return {\n                ...state,\n                showModal: action.showModal,\n            }\n        case \"CONTROL_RADIO_BUTTON_CLICK\":\n            return {\n                ...state,\n                searchType: action.text,\n            }\n        case \"CATEGORIES_CLICK\":\n            return {\n                ...state,\n                category: action.text,\n            }\n        case \"SEARCH_TEXT_CHANGE\":\n            return {\n                ...state,\n                searchText: action.text,\n            }\n        case \"GET_JOKE\":\n            return {\n                ...state,\n                jokes: action.data,\n            }\n        case \"HEART_CLICK\":\n            const favouritesMap = new Map(state.favourites);\n            favouritesMap.set(action.joke.id, action.joke);\n            localStorage.setItem('favourites', JSON.stringify(Array.from(favouritesMap.entries())));\n            return {\n                ...state,\n                favourites: favouritesMap,\n            }\n        case \"DISLIKE_CLICK\":\n            const dislikeFavouritesMap = new Map(state.favourites);\n            dislikeFavouritesMap.delete(action.id);\n            localStorage.setItem('favourites', JSON.stringify(Array.from(dislikeFavouritesMap.entries())));\n            return {\n                ...state,\n                favourites: dislikeFavouritesMap,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Provider} from 'react-redux';\nimport reducer from './reducer';\nimport './App.css';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}